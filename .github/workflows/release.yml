name: Release / Publish

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-3.13-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-3.13-
          ${{ runner.os }}-python-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run full test suite
      run: uv run pytest --tb=short --timeout=120

    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-3.13-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-3.13-
          ${{ runner.os }}-python-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Build package
      run: uv build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    name: Create GitHub Release
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk "/^## \[?${{ steps.version.outputs.VERSION }}\]?/ {flag=1; next} /^## \[?[0-9]/ && flag {exit} flag" CHANGELOG.md > RELEASE_NOTES.md
        else
          # Generate from git log
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Pantainos ${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
